-- 1. List the number of films per category.
select category.name,count(*)
from category
LEFT JOIN film_category
ON category.category_id=film_category.category_id
group by category.name;

-- 2. Retrieve the store ID, city, and country for each store.
select s.store_id,c.city,co.country
from store as s
LEFT JOIN address as a ON s.address_id=a.address_id
LEFT JOIN city as c ON a.city_id=c.city_id
LEFT JOIN country as co ON c.country_id=co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN inventory i ON s.store_id = i.store_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category.
select ca.name, avg(f.length)
from category as ca
left join film_category as c on ca.category_id=c.category_id
left join film as f on c.film_id=f.film_id
group by ca.name;

-- Bonus
-- 5. Identify the film categories with the longest average running time.
select ca.name, avg(f.length) as top_3_longest
from category as ca
left join film_category as c on ca.category_id=c.category_id
left join film as f on c.film_id=f.film_id
group by ca.name
order by top_3_longest DESC
LimIT 3	;

-- 6. Display the top 10 most frequently rented movies in descending order.
select ca.name, count(*) as times_rented
from category as ca
left join film_category as c on ca.category_id=c.category_id
left join film as f on c.film_id=f.film_id
group by ca.name
order by times_rented DESC;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
select f.title, s.store_id
from film as f
left join inventory as i on f.film_id=i.film_id
left join store as s on i.store_id= s.store_id
where f.title="ACADEMY DINOSAUR"; #yes can be rented from store 1

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
select DISTINCT f.title,
CASE 
when ifnull(i.inventory_id,0)=0 then "not availale"
else "available"
end as availability_status
from film as f
left join inventory as i on f.film_id=i.film_id
;







